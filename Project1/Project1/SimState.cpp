///////////////////////////////////////////////////////////////////////////////
// Project: ECE 578 Project 1 The Distributed Coordination function (DCF) of 802.11
// Author: Dillon Gregerson
// Originated: 10/10/2020
///////////////////////////////////////////////////////////////////////////////
#include "SimState.hpp"
#include <cstdlib>

SimState SimState::instance_;
SimState* SimState::pInstance_(0);

///////////////////////////////////////////////////////////////////////////////
// @brief Constructor
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
SimState::SimState(void):
	currSlotTime_(0)
{
	poissonDistribution_.generateDistribution();
}

///////////////////////////////////////////////////////////////////////////////
// @brief Destructor
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
SimState::~SimState(void)
{
    //deallocate
}

///////////////////////////////////////////////////////////////////////////////
// @brief update the slot
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
void SimState::updateSlot(void)
{
    currSlotTime_++;
}

///////////////////////////////////////////////////////////////////////////////
// @brief get slot time
// @params void
// @return unsigned log currSlotTime_
///////////////////////////////////////////////////////////////////////////////
unsigned long SimState::getSlotTime(void)
{
    return currSlotTime_;
}

///////////////////////////////////////////////////////////////////////////////
// @brief getInstance, returns the singleton instance of this class
// @params void
// @return static pointer pInstance
///////////////////////////////////////////////////////////////////////////////
SimState* SimState::getInstance(void)
{
	if (pInstance_ == 0)
	{
		pInstance_ = &instance_;
	}
	return pInstance_;
}

///////////////////////////////////////////////////////////////////////////////
// @brief getSignals
// @params void
// @return unsigned long currSignals_
///////////////////////////////////////////////////////////////////////////////
unsigned long SimState::getSignals(void)
{
	return currSignals_;
}

///////////////////////////////////////////////////////////////////////////////
// @brief Destructor
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
void SimState::sendSignals(unsigned long currSignal)
{
	currSignals_ += currSignal;
}

///////////////////////////////////////////////////////////////////////////////
// @brief gextNextArrivalSlot, calls into the poissonDistribution array
//        to get the next slot for which a message will be ready to send
// @params void
// @return unsigned int nextSlotArrival
///////////////////////////////////////////////////////////////////////////////
unsigned int SimState::getNextArrivalSlot(void)
{
	return poissonDistribution_.getNextSlotArrival();
}

void SimState::clearSignals(void)
{
	currSignals_ = 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////