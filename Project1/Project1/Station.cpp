///////////////////////////////////////////////////////////////////////////////
// Project: ECE 578 Project 1 The Distributed Coordination function (DCF) of 802.11
// Author: Dillon Gregerson
// Originated: 10/10/2020
///////////////////////////////////////////////////////////////////////////////

#include <string>
#include <cstdlib>
#include "Station.hpp"
#include "ProtocolBase.hpp"

///////////////////////////////////////////////////////////////////////////////
// @brief constructor
// @params const StationConfig& config: configuration for the station
// @return N/A
///////////////////////////////////////////////////////////////////////////////
Station::Station(const StationConfig& config):
	StationBase(config.stationId),
	protocol_(config.protocol),
	stationName_(config.stationName),
	currentSlot_(0),
	pSimState_(SimState::getInstance())
{

}
///////////////////////////////////////////////////////////////////////////////
// @brief destructor
// @params void
// @return N/A
///////////////////////////////////////////////////////////////////////////////
Station::~Station(void)
{
	//deallocate
}

///////////////////////////////////////////////////////////////////////////////
// @brief getStationName: returns a string with the station's name
// @params void
// @return std::string stationName_
///////////////////////////////////////////////////////////////////////////////
std::string Station::getStationName(void) const
{
	return stationName_;
}

///////////////////////////////////////////////////////////////////////////////
// @brief getId: returns a the station's id 
// @params void
// @return std::string stationId_
///////////////////////////////////////////////////////////////////////////////
//TODO this should be an unsigned long
unsigned long Station::getId(void) const
{
	return stationId_;
}

///////////////////////////////////////////////////////////////////////////////
// @brief gint id 
// @params void
// @return std::string stationId_
///////////////////////////////////////////////////////////////////////////////
void Station::initialize(unsigned long id)
{
	//do station Initialization
}

///////////////////////////////////////////////////////////////////////////////
// @brief listen for signals on the link
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
void Station::listen(void)
{
	protocol_->updateState(pSimState_->getSignals(), pSimState_->getSlotTime());
}

///////////////////////////////////////////////////////////////////////////////
// @brief execute the protocol action
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
void Station::takeAction(void)
{
	protocol_->execute();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////