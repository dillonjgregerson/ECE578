///////////////////////////////////////////////////////////////////////////////
// Project: ECE 578 Project 1 The Distributed Coordination function (DCF) of 802.11
// Author: Dillon Gregerson
// Originated: 10/10/2020
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include "Simulator.hpp"

///////////////////////////////////////////////////////////////////////////////
// @brief Constructor
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
Simulator::Simulator(void):
	simState_(SimState::getInstance())
{

}

///////////////////////////////////////////////////////////////////////////////
// @brief Destructor
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
Simulator::~Simulator(void)
{
    
}

///////////////////////////////////////////////////////////////////////////////
// @brief update the system
// @params void
// @return void
///////////////////////////////////////////////////////////////////////////////
void Simulator::update(void)
{
	simState_->updateSlot();
	for (auto const& a : stations_)
	{
		a->listen();
	}

	for (auto const& a : stations_)
	{
		a->takeAction();
	}

	std::cout << "Current Slot Time: " << simState_->getSlotTime() << std::endl;

}

///////////////////////////////////////////////////////////////////////////////
// @brief add a station to the simulation
// @params void
// @return boolean if addition of the station was successful
///////////////////////////////////////////////////////////////////////////////
bool Simulator::addStation(StationBase* station)
{
	stations_.push_back(station);
	return true;
}

///////////////////////////////////////////////////////////////////////////////
// @brief getUniqueMsg to assign to each station, so as to differentiate them
// @params void
// @return unsigned long the unique message id
///////////////////////////////////////////////////////////////////////////////
unsigned long Simulator::getUniqueMsgId(void) const
{
	long newMsgId = 0;
	bool unique   = false;
	do
	{
		unique = true;
		newMsgId = rand() % 10000000;
		for (auto const& a : stations_)
		{
			if (newMsgId == a->getStationId())
			{
				unique = false;
			}
		}
	} while (!unique);

	return newMsgId;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////